#Использовать irac

Перем ПодключениеКАгентам;
Перем ПараметрыСчетчиков;
Перем ДанныеСеансов;

#Область ПрограммныйИнтерфейс

// Процедура инициализирует подключение к агентам управления кластерами
//
// Параметры:
//   НастройкиПодключения     - Строка,     - путь к файлу настроек управления кластерами
//                              Структура     или структура настроек управления кластерами
//
Процедура Инициализировать(Знач НастройкиПодключения = Неопределено) Экспорт

	ПодключениеКАгентам = Новый ПодключениеКАгентам(НастройкиПодключения);

	УстановитьПараметрыСчетчиков();
	
КонецПроцедуры // Инициализировать()

// Функция - возвращает объект-подключение к агентам кластера 1С
//
// Возвращаемое значение:
//   ПодключениеКАгентам     - объект-подключение к агентам кластера 1С
//
Функция ПодключениеКАгентам() Экспорт
	
	Возврат ПодключениеКАгентам;

КонецФункции // ПодключениеКАгентам()

// Процедура устанавливает параметры счетчиков
//
// Параметры:
//   НовыеПараметры     - Строка,     - путь к файлу настроек счетчиков
//                        Структура     или структура настроек счетчиков
//
Процедура УстановитьПараметрыСчетчиков(Знач НовыеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(НовыеПараметры) = Тип("Структура") Тогда
		ПараметрыСчетчиков = НовыеПараметры;
	ИначеЕсли ТипЗнч(НовыеПараметры) = Тип("Строка") Тогда
		ПараметрыСчетчиков = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON(НовыеПараметры);
	Иначе
		ПараметрыСчетчиков = ОбщегоНазначения.ПрочитатьДанныеИзМакетаJSON("/config/counters");
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыСчетчиков()

// Функция - возвращает структуру параметров счетчиков
//
// Возвращаемое значение:
//   Структура     - структура параметров счетчиков
//
Функция ПараметрыСчетчиков() Экспорт
	
	Возврат ПараметрыСчетчиков;

КонецФункции // ПараметрыСчетчиков()

Процедура ОбновитьДанныеСеансов() Экспорт

	ДанныеСеансов = Новый Массив();

	Для Каждого ТекАгент Из ПодключениеКАгентам.Агенты() Цикл

		СеансыАгента = СеансыАгента(ТекАгент.Значение);

		Для Каждого ТекСеанс Из СеансыАгента Цикл
			ДанныеСеансов.Добавить(ТекСеанс);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьДанныеСеансов()

Функция ДанныеСеансов(Знач Обновить = Ложь) Экспорт

	Если Обновить Тогда
		ОбновитьДанныеСеансов();
	КонецЕсли;

	Возврат ДанныеСеансов;

КонецФункции // ДанныеСеансов()

Функция Список() Экспорт

	ОбновитьДанныеСеансов();

	Возврат ОбщегоНазначения.ДанныеВJSON(ДанныеСеансов());
	
КонецФункции // Список()

Функция Счетчики() Экспорт

	ОбновитьДанныеСеансов();

	ПараметрыПолученияДанных = ПараметрыСчетчиков()["session"];

	Счетчики = ПараметрыПолученияДанных["counters"];

	Текст = Новый ТекстовыйДокумент();

	Для Каждого ТекСчетчик Из Счетчики Цикл
		
		Если НЕ ТекСчетчик.Значение["use"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСчетчика = ТекСчетчик.Ключ;
		ИмяИсточникаСчетчика = ИмяСчетчика;
		Если ТекСчетчик.Значение.Свойство("name_rac") Тогда
			ИмяИсточникаСчетчика = ТекСчетчик.Значение["name_rac"];
		КонецЕсли;

		ОписаниеСчетчика = ТекСчетчик.Значение["description"];
		ИзмеренияСчетчика = ТекСчетчик.Значение["dimentions"];

		Текст.ДобавитьСтроку(СтрШаблон("# HELP c1_session_%1 %2", ИмяСчетчика, ОписаниеСчетчика));
		Текст.ДобавитьСтроку(СтрШаблон("# TYPE c1_session_%1 gauge", ИмяСчетчика));

		Для Каждого ТекСеанс Из ДанныеСеансов Цикл
		
			ЗначенияИзмерений = ЗначенияИзмеренийСчетчика(ПараметрыПолученияДанных, ТекСеанс, ТекСчетчик.Значение);

			ЗначениеПоказателя = ТекСеанс[ИмяИсточникаСчетчика];

			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;
			Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
				ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧРД=.; ЧН=; ЧГ=0");
			КонецЕсли;
			Текст.ДобавитьСтроку(СтрШаблон("c1_session_%1{%2} %3",
			                               ИмяСчетчика,
			                               ЗначенияИзмерений,
			                               ЗначениеПоказателя));
		КонецЦикла;
		Текст.ДобавитьСтроку("");
	КонецЦикла;
	
	Возврат Текст.ПолучитьТекст();

КонецФункции // Счетчики()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПолучениеДанныхСеансов

Функция СеансыАгента(Знач Агент)

	СеансыАгента = Новый Массив();

	Кластеры = Агент.Кластеры().Список();

	Для Каждого ТекКластер Из Кластеры Цикл

		СеансыКластера = СеансыКластера(ТекКластер);

		Для Каждого ТекСеанс Из СеансыКластера Цикл
			
			ТекСеанс.Вставить("agent"  , Агент.Описаниеподключения());

			СеансыАгента.Добавить(ТекСеанс);

		КонецЦикла;

	КонецЦикла;

	Возврат СеансыАгента;

КонецФункции // СеансыАгента()

Функция СеансыКластера(Знач Кластер)

	ИменаИБ = Новый Соответствие();
	
	ИБ = Кластер.ИнформационныеБазы().Список();
	Для Каждого ТекИБ Из ИБ Цикл
		ИменаИБ.Вставить(ТекИБ.Ид(), ТекИб.Имя());
	КонецЦикла;

	СеансыКластера = Новый Массив();

	Сеансы = Кластер.Сеансы().Список(, , Истина);

	ПоляСеанса = Кластер.Сеансы().ПараметрыОбъекта("ИмяРАК");

	Для Каждого ТекСеанс Из Сеансы Цикл
				
		ОписаниеСеанса = Новый Соответствие();
		ОписаниеСеанса.Вставить("cluster", Кластер.Имя());
		ОписаниеСеанса.Вставить("count"  , 1);

		Для Каждого ТекЭлемент Из ПоляСеанса Цикл
			ЗначениеЭлемента = ТекСеанс[ТекЭлемент.Значение.Имя];
			Если ТекЭлемент.Ключ = "infobase" Тогда
				ЗначениеЭлемента = ИменаИБ[ЗначениеЭлемента];
			КонецЕсли;
			ОписаниеСеанса.Вставить(ТекЭлемент.Ключ, ЗначениеЭлемента);
		КонецЦикла;

		СеансыКластера.Добавить(ОписаниеСеанса);

	КонецЦикла;

	Возврат СеансыКластера;
	
КонецФункции // СеансыКластера()

#КонецОбласти // ПолучениеДанныхСеансов

Функция ЗначенияИзмеренийСчетчика(Знач ПараметрыСчетчиков, Знач Сеанс, Знач Счетчик)

	ПрефиксСчетчика = ПараметрыСчетчиков["counter_prefix"];

	ВсеИзмерения = ПараметрыСчетчиков["dimentions"];

	ИзмеренияСчетчика = Счетчик["dimentions"];

	ЗначенияИзмерений = "";
	
	Для Каждого ТекИзмерение Из ИзмеренияСчетчика Цикл

		ОписаниеИзмерения = ВсеИзмерения[ТекИзмерение];

		ИмяИсточникаИзмерения = ТекИзмерение;
		Если ОписаниеИзмерения.Свойство("name_rac") Тогда
			ИмяИсточникаИзмерения = ОписаниеИзмерения["name_rac"];
		КонецЕсли;

		ЗначениеИзмерения = Сеанс[ИмяИсточникаИзмерения];

		ЗначенияИзмерений = ЗначенияИзмерений +
							?(ЗначенияИзмерений = "", "", ",") +
							СтрШаблон("%1=""%2""", ТекИзмерение, ЗначениеИзмерения);
	КонецЦикла;
	
	Возврат ЗначенияИзмерений;

КонецФункции // ЗначенияИзмеренийСчетчика()

Инициализировать();
